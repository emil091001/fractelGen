// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float3 _LightDirection;

float3 colorMultiplier;
float3 colorOffset;

int MAX_MARCH_ITERATIONS;
float MIN_DISTANCE;
const float MAX_DIST = 50;

float a1;
float a2;
float a3;

float b1;
float b2;
float b3;

float CX;
float CY;
float CZ;

float scale;
float epsillon;

RWTexture2D<float4> Result;

struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin,direction);
}

float DE2(float3 p)
{
    return length(abs(p) - 1) - 1;
}


float3 rotate2(float3 p)
{
    float3x3 RX;
    RX[0][0] = 1;
    RX[0][1] = 0;
    RX[0][2] = 0;

    RX[1][0] = 0;
    RX[1][1] = cos(b1);
    RX[1][2] = sin(b1);

    RX[2][0] = 0;
    RX[2][1] = -sin(b1);
    RX[2][2] = cos(b1);

    float3x3 RY;
    RY[0][0] = cos(b2);
    RY[0][1] = 0;
    RY[0][2] = -sin(b2);

    RY[1][0] = 0;
    RY[1][1] = 1;
    RY[1][2] = 0;

    RY[2][0] = sin(b2);
    RY[2][1] = 0;
    RY[2][2] = cos(b2);
    

    float3x3 RZ;
    RZ[0][0] = cos(b3);
    RZ[0][1] = sin(b3);
    RZ[0][2] = 0;

    RZ[1][0] = -sin(b3);
    RZ[1][1] = cos(b3);
    RZ[1][2] = 0;

    RZ[2][0] = 0;
    RZ[2][1] = 0;
    RZ[2][2] = 1;
    
    return mul(RZ, mul(RY, mul(RX, p)));
}

float3 rotate1(float3 p)
{
    float3x3 RX;
    RX[0][0] = 1;
    RX[0][1] = 0;
    RX[0][2] = 0;

    RX[1][0] = 0;
    RX[1][1] = cos(a1);
    RX[1][2] = sin(a1);

    RX[2][0] = 0;
    RX[2][1] = -sin(a1);
    RX[2][2] = cos(a1);

    float3x3 RY;
    RY[0][0] = cos(a2);
    RY[0][1] = 0;
    RY[0][2] = -sin(a2);

    RY[1][0] = 0;
    RY[1][1] = 1;
    RY[1][2] = 0;

    RY[2][0] = sin(a2);
    RY[2][1] = 0;
    RY[2][2] = cos(a2);
    

    float3x3 RZ;
    RZ[0][0] = cos(a3);
    RZ[0][1] = sin(a3);
    RZ[0][2] = 0;

    RZ[1][0] = -sin(a3);
    RZ[1][1] = cos(a3);
    RZ[1][2] = 0;

    RZ[2][0] = 0;
    RZ[2][1] = 0;
    RZ[2][2] = 1;
    
    return mul(RZ, mul(RY, mul(RX, p)));
}

struct SceneInfo
{
    float dist;
    float4 orbitTrap;
};

float deBox(float3 p, float3 s)
{
    float3 a = abs(p) - s;
    return (min(max(max(a.x, a.y), a.z), 0.0) + length(max(a, 0.0)));
}

float de_box(float4 p, float3 s) {
	float3 a = abs(p.xyz) - s;
	return (min(max(max(a.x, a.y), a.z), 0.0) + length(max(a, 0.0))) / p.w;
}

float de_obj1826121950160(float4 p) {
	float4 o = p;
	float d = 1e20;

    for (int i = 0; i < FRACTAL_ITERATIONS; i++) {
        p.xyz = rotate1(p.xyz); //rotY(p, 0.4259394650659996, 0.9047516632199634);
        p.xyz = abs(p.xyz);
        mengerFold(p);
        p *= 1.3;
        p.xyz = rotate2(p.xyz);
        p.xyz += float3(-CX,-CY,-CZ);
        p.z = -abs(p.z + 0) - 0;
    }
	
	d = min(d, de_box(p, float3(4.8,4.8,4.8)));
	return d;
}
float4 col_obj1826121950160(float4 p) {
	float4 o = p;
	float4 col = 1e20;
	float4 newCol;
	float3 orbit = 1e20;

    for (int i = 0; i < FRACTAL_ITERATIONS; i++) {
        p.xyz = rotate1(p.xyz); //rotY(p, 0.4259394650659996, 0.9047516632199634);
        p.xyz = abs(p.xyz);
        mengerFold(p);
        orbit = min(orbit, abs((p.xyz - colorOffset)*colorMultiplier));
        p *= 1.3;
        p.xyz = rotate2(p.xyz);
        p.xyz += float3(-CX,-CY,-CZ);
        p.z = -abs(p.z + 0) - 0;
    }
	
	newCol = float4(orbit, de_box(p, float3(4.8,4.8,4.8)));
	if (newCol.w < col.w) { col = newCol; }
	return col;
}

float3 mengerFold(float3 z) {
	float a = min(z.x - z.y, 0.0);
	z.x -= a;
	z.y += a;
	a = min(z.x - z.z, 0.0);
	z.x -= a;
	z.z += a;
	a = min(z.y - z.z, 0.0);
	z.y -= a;
	z.z += a;
    return z;
}

float DE(float3 p)
{
    int i;
    float3 p1;
    const int MI = 30;

    for(i=0;i<MI;i++){
        
        p = rotate1(p);

        p = abs(p); // p.x=abs(p.x);p.y=abs(p.y);p.z=abs(p.z); //
        if(p.x-p.y<0){p1.x=p.y;p.y=p.x;p.x=p1.x;}
        if(p.x-p.z<0){p1.x=p.z;p.z=p.x;p.x=p1.x;}
        if(p.y-p.z<0){p1.y=p.z;p.z=p.y;p.y=p1.y;}
  
        p.z-=0.5*CZ*(scale-1)/scale;
        p.z=-abs(-p.z);
        p.z+=0.5*CZ*(scale-1)/scale;

        p = rotate2(p);

        p.x=scale*p.x-CX*(scale-1);
        p.y=scale*p.y-CY*(scale-1);
        p.z=scale*p.z;
    }

    return sqrt(p.x*p.x+p.y*p.y+p.z*p.z) * pow(scale, float(-i)); //min(d, deBox(p, float3(4.8, 4.8, 4.8))); //
}

float3 calcColor(float3 p)
{
    int i;
    float3 p1;


    const int MI = 30;
    float3 orbit = 1e20;


    for(i=0;i<MI;i++){
        
        p = rotate1(p);

        p = abs(p); // p.x=abs(p.x);p.y=abs(p.y);p.z=abs(p.z); //
        if(p.x-p.y<0){p1.x=p.y;p.y=p.x;p.x=p1.x;}
        if(p.x-p.z<0){p1.x=p.z;p.z=p.x;p.x=p1.x;}
        if(p.y-p.z<0){p1.y=p.z;p.z=p.y;p.y=p1.y;}
  
        p.z-=0.5*CZ*(scale-1)/scale;
        p.z=-abs(-p.z);
        p.z+=0.5*CZ*(scale-1)/scale;

        p = rotate2(p);

        p.x=scale*p.x-CX*(scale-1);
        p.y=scale*p.y-CY*(scale-1);
        p.z=scale*p.z;
        orbit = min(orbit, abs(p + colorOffset) * colorMultiplier * epsillon);
    }

    return clamp(orbit, 0.0, 1.0);
}

float3 calcNormals(float3 p, float dx)
{
    float2 k = float2(1, -1);
    return normalize(
        k.xyy*DE( p + k.xyy*dx ).x + 
        k.yyx*DE( p + k.yyx*dx ).x + 
        k.yxy*DE( p + k.yxy*dx ).x + 
        k.xxx*DE( p + k.xxx*dx ).x);
}

float3 rayMarch(float3 ro, float3 rd)
{
    float t = 0;
    float s = 0;
    float d = MIN_DISTANCE;
    for (; s < MAX_MARCH_ITERATIONS; s += 1.0)
    {
        d = DE(ro + rd * t);
        t += d;
        if (d < MIN_DISTANCE)
        {
            //s += d / MIN_DISTANCE;
            break;
        } if (t > 50.0) break;
    }
    return float3(t, s, d);
}


float softShadow(float3 ro, float3 rd, float mint, float maxt, float k)
{
    float res = 1.0;
    float t = mint;
    for( int i=0; i<256 && t<maxt; i++ )
    {
        float h = DE(ro + rd*t); 
        if( 10 * h<MIN_DISTANCE)
            return 0.0;
        res = min( res, k*h/t );
        t += h;
    }
    return res;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width,height;
    Result.GetDimensions(width, height);
    float2 uv = (id.xy / float2(width,height)) * 2 - 1;
    Ray ray = CreateCameraRay(uv);

    float3 t_s_d = rayMarch(ray.origin, ray.direction);
    float t = t_s_d.x;
    float s = t_s_d.y;
    float d = t_s_d.z;

    const float minDist = MIN_DISTANCE * max(t * 10, 1.0);

    float3 color;// = d * 100;

    
    if (d < minDist)
    {
        float3 n = calcNormals(ray.origin + ray.direction * t, MIN_DISTANCE * 10);
        color = calcColor(ray.origin + ray.direction * t);
        float light = clamp(-(dot(n, _LightDirection)), 0.0, 1.0) * softShadow(ray.origin + ray.direction * t, -_LightDirection, MIN_DISTANCE, 10, 32);
        color *= (light + 0.2);

        color += s / (float) MAX_MARCH_ITERATIONS;
        color *= 1.2;
    } else
    {
        color = float3(0.05, 0.05, 0.05);
    }
    
    
    Result[id.xy] = float4(color, DE(ray.origin));
}
